plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.tw'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	lombokVersion = '1.18.30'
	mapstructVersion = '1.4.2.Final'
	springVersion = '3.1.3'
	openApiVersion = '2.2.0'
	springValidationVersion = '2.7.4'
	springSecurityTestVersion = '6.1.3'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-validation:${springVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "org.springframework.boot:spring-boot-starter-security:${springVersion}"

	// swagger
	implementation "org.springframework.boot:spring-boot-starter-validation:${springValidationVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.springframework.security:spring-security-test:${springSecurityTestVersion}"

	// h2 database
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.springframework.boot:spring-boot-devtools'

	// lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.jacocoTestReport {
	dependsOn test

	reports {
		html.required.set(true)
		html.outputLocation = layout.buildDirectory.dir('jacoco')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/**/model/**',
					'**/**/exception/**'
			])
		}))
	}

	finalizedBy(tasks.jacocoTestCoverageVerification)
}


tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = "0.40".toBigDecimal()
			}
		}
	}
}

jacoco {
	toolVersion = "0.8.10"
}

test {
	useJUnitPlatform()
	jacoco {
		enabled = true
	}
	finalizedBy jacocoTestReport // Generate JaCoCo test coverage report after running tests
}

